// src/db.js
import { Sequelize, Op } from "sequelize";
import defineUser from "./models/User.js";

const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_HOST || "db",
    dialect: "postgres",
    logging: false,
  }
);

// Initialisation du mod√®le User
export const User = defineUser(sequelize);
export default sequelize;

export async function initDatabase() {
  try {
    // V√©rification de la connexion
    await sequelize.authenticate();
    console.log("üéâ Connexion r√©ussie √† la base de donn√©es PostgreSQL.");

    // Synchronisation des mod√®les avec la base de donn√©es
    await sequelize.sync();
    console.log("üîÑ Les mod√®les ont √©t√© synchronis√©s avec la base de donn√©es.");

    // Cr√©ation de l'administrateur si les variables d'environnement sont d√©finies
    const { ADMIN_EMAIL, ADMIN_USERNAME, ADMIN_PASSWORD } = process.env;
    if (ADMIN_EMAIL && ADMIN_USERNAME && ADMIN_PASSWORD) {
      // V√©rifier si un utilisateur existe d√©j√† avec le m√™me email ou le m√™me username
      const existingAdmin = await User.findOne({
        where: {
          [Op.or]: [{ email: ADMIN_EMAIL }, { username: ADMIN_USERNAME }],
        },
      });
      if (!existingAdmin) {
        await User.create({
          username: ADMIN_USERNAME,
          email: ADMIN_EMAIL,
          password: ADMIN_PASSWORD,
          role: "admin",
        });
        console.log(`‚úÖ Compte administrateur cr√©√© : ${ADMIN_EMAIL}`);
      } else {
        console.log(`‚ÑπÔ∏è Compte administrateur d√©j√† existant : ${existingAdmin.email}`);
      }
    } else {
      console.log("‚ö†Ô∏è Variables d'environnement pour l'administrateur non d√©finies. Aucun admin cr√©√©.");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la connexion ou de la synchronisation √† la base de donn√©es:", error);
  }
}
