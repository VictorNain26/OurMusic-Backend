// src/db.js
import { Sequelize, Op } from 'sequelize';
import defineUser from './models/User.js';
import defineLikedTrack from './models/LikedTrack.js'; // Ajout du mod√®le LikedTrack

const sequelize = new Sequelize(process.env.DB_NAME, process.env.DB_USER, process.env.DB_PASSWORD, {
  host: process.env.DB_HOST || 'db',
  dialect: 'postgres',
  logging: false,
});

// Initialisation des mod√®les
export const User = defineUser(sequelize);
export const LikedTrack = defineLikedTrack(sequelize);

// Associations : un utilisateur peut avoir plusieurs morceaux lik√©s
User.hasMany(LikedTrack, { foreignKey: 'UserId', onDelete: 'CASCADE' });
LikedTrack.belongsTo(User, { foreignKey: 'UserId' });

export default sequelize;

// La fonction initDatabase reste inchang√©e
export async function initDatabase() {
  try {
    await sequelize.authenticate();
    console.log('üéâ Connexion r√©ussie √† la base de donn√©es PostgreSQL.');
    await sequelize.sync();
    console.log('üîÑ Les mod√®les ont √©t√© synchronis√©s avec la base de donn√©es.');

    // Cr√©ation de l'administrateur (code existant)...
    const { ADMIN_EMAIL, ADMIN_USERNAME, ADMIN_PASSWORD } = process.env;
    if (ADMIN_EMAIL && ADMIN_USERNAME && ADMIN_PASSWORD) {
      const existingAdmin = await User.findOne({
        where: {
          [Op.or]: [{ email: ADMIN_EMAIL }, { username: ADMIN_USERNAME }],
        },
      });
      if (!existingAdmin) {
        await User.create({
          username: ADMIN_USERNAME,
          email: ADMIN_EMAIL,
          password: ADMIN_PASSWORD,
          role: 'admin',
        });
        console.log(`‚úÖ Compte administrateur cr√©√© : ${ADMIN_EMAIL}`);
      } else {
        console.log(`‚ÑπÔ∏è Compte administrateur d√©j√† existant : ${existingAdmin.email}`);
      }
    } else {
      console.log(
        "‚ö†Ô∏è Variables d'environnement pour l'administrateur non d√©finies. Aucun admin cr√©√©.",
      );
    }
  } catch (error) {
    console.error(
      '‚ùå Erreur lors de la connexion ou de la synchronisation √† la base de donn√©es:',
      error,
    );
  }
}
